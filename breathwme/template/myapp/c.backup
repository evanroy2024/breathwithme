<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Meditation Guide</title>
    <style>
        body {
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            height: 100vh;
            background-color: black;
            color: white;
            font-family: Arial, sans-serif;
        }

        select {
            margin-bottom: 20px;
            padding: 10px;
            font-size: 16px;
            background: white;
            color: black;
            border: none;
            border-radius: 5px;
        }

        .shape-container {
            display: flex;
            align-items: center;
            justify-content: center;
            width: 100vw;
            height: 60vh;
            position: relative;
        }

        .shape {
            position: absolute;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 24px;
            font-weight: bold;
            color: white;
            border: 3px solid white;
            text-align: center;
        }

        .golden-line {
            position: absolute;
            border: 2px solid gold;
        }

        .text {
            position: absolute;
            color: white;
            font-size: 20px;
            font-weight: bold;
        }

        @keyframes moveCircle {
            0% {
                transform: rotate(0deg) translateX(100px) rotate(0deg);
            }

            100% {
                transform: rotate(360deg) translateX(100px) rotate(-360deg);
            }
        }

        @keyframes moveSquare {
            0% {
                top: -10px;
                left: 10px;
            }

            25% {
                top: -10px;
                left: 195px;
            }

            50% {
                top: 190px;
                left: 195px;
            }

            75% {
                top: 195px;
                left: -10px;
            }

            100% {
                top: -10px;
                left: -10px;
            }
        }

        @keyframes moveRectangleH {
            0% {
                top: -10px;
                left: 10px;
            }

            25% {
                top: -10px;
                left: 295px;
            }

            50% {
                top: 140px;
                left: 295px;
            }

            75% {
                top: 140px;
                left: -10px;
            }

            100% {
                top: 10px;
                left: -10px;
            }
        }

        @keyframes moveRectangleV {
            0% {
                top: -10px;
                left: 10px;
            }

            25% {
                top: -10px;
                left: 145px;
            }

            50% {
                top: 295px;
                left: 140px;
            }

            75% {
                top: 295px;
                left: -10px;
            }

            100% {
                top: -10px;
                left: -10px;
            }
        }
    #progressContainer {
        width: 100%;
        background: rgba(255, 255, 255, 0.1);
        height: 6px;
        border-radius: 5px;
        position: relative;
        cursor: pointer;
        margin-top: 10px;
        overflow: hidden;
    }
  
    #progressBar {
        width: 0%;
        height: 100%;
        background: gold;
        transition: width 0.1s linear;
    }
  
    #progressHandle {
        width: 12px;
        height: 12px;
        background: white;
        border-radius: 50%;
        position: absolute;
        top: 50%;
        transform: translate(-50%, -50%);
        left: 0%;
        transition: left 0.1s linear;
    }

    /* New styling for it ----------------------------------------------------  */
/* Centering the select dropdown */
.part1 {
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    height: 100vh; /* Adjust based on your layout */
}

/* Styling for the select dropdown */
#shapeSelector {
    padding: 12px 16px;
    font-size: 16px;
    font-weight: 500;
    border: 2px solid #FFD700; /* Golden border */
    border-radius: 8px;
    background: #000; /* Black background */
    color: #fff; /* White text */
    cursor: pointer;
    outline: none;
    transition: all 0.3s ease-in-out;
    width: 220px;
    text-align: center;
    box-shadow: 0 4px 6px rgba(255, 215, 0, 0.2);
    display: block;
    margin: 0 auto; /* Centering */
}

/* Hover effect */
#shapeSelector:hover {
    border-color: #fff;
    box-shadow: 0 4px 8px rgba(255, 255, 255, 0.3);
}

/* Focus effect */
#shapeSelector:focus {
    border-color: #FFD700;
    box-shadow: 0 4px 8px rgba(255, 215, 0, 0.5);
}

/* Style for options inside select */
option {
    background: #000;
    color: #fff;
    font-size: 16px;
    font-weight: 500;
}

/* Styling for shape descriptions */
.shape-description {
    margin-top: 12px;
    padding-left: 20px;
    font-size: 16px;
    color: #fff; /* White text */
    list-style-type: none;
    text-align: center; /* Centering text */
}

/* Bullet point styles */
.shape-description li {
    margin-bottom: 6px;
    line-height: 1.5;
    position: relative;
    padding-left: 20px;
    text-align: left;
}

.shape-description li::before {
    content: "•";
    position: absolute;
    left: 0;
    color: #FFD700; /* Golden bullet points */
    font-size: 18px;
}
/* Centering the section */
.part2 {
    text-align: center;
    margin-top: 20px;
    color: #fff; /* White text */
}

/* Styling for the heading */
.part2 h2 {
    font-size: 20px;
    font-weight: 600;
    margin-bottom: 10px;
    color: #FFD700; /* Golden color */
}

/* Container for buttons (stacked tightly) */
#timingControls {
    display: flex;
    flex-direction: column; /* Stacks buttons vertically */
    align-items: center; /* Centers them */
    gap: 4px; /* Minimal gap for a tight look */
    max-width: 140px;
    margin: 0 auto;
}

/* Styling divs as buttons */
#timingControls div {
    width: 100px; /* Balanced button width */
    height: 35px;
    font-size: 14px;
    font-weight: 500;
    color: #fff;
    border: 2px solid #FFD700; /* Golden border */
    border-radius: 4px; /* Slightly rounded edges */
    background: #111; /* Dark button background */
    cursor: pointer;
    transition: all 0.2s ease-in-out;
    display: flex;
    align-items: center;
    justify-content: center;
    user-select: none; /* Prevents text selection */
}

/* Hover effect */
#timingControls div:hover {
    border-color: #fff;
    box-shadow: 0 1px 3px rgba(255, 255, 255, 0.2);
}

/* Active (clicked) effect */
#timingControls div:active {
    background: #222;
    border-color: #FFD700;
    transform: scale(0.98);
}

/* ✅ Dropdown Styling */
.part2 select {
    width: 160px;
    padding: 8px;
    font-size: 14px;
    font-weight: 500;
    color: #fff;
    background: #111;
    border: 2px solid #FFD700; /* Golden border */
    border-radius: 4px;
    text-align: center;
    outline: none;
    transition: 0.2s;
    display: block;
    margin: 5px auto; /* Reduced spacing */
    appearance: none; /* Hides default arrow in some browsers */
    cursor: pointer;
}

/* Hover & Focus Effects */
.part2 select:focus {
    border-color: #fff;
    box-shadow: 0 1px 3px rgba(255, 255, 255, 0.2);
}

/* Dropdown Arrow Customization */
.part2 select::-ms-expand {
    display: none; /* Hides default arrow in IE */
}
/* Center and Style the Button */
#confirmButton {
    display: block;
    margin: 20px auto; /* Centers horizontally */
    padding: 12px 28px; /* Larger size */
    font-size: 18px;
    font-weight: 700;
    color: #111; /* Dark text for contrast */
    background: #fff; /* White button */
    border: 3px solid #FFD700; /* Golden border */
    border-radius: 8px; /* Smooth edges */
    cursor: pointer;
    transition: all 0.3s ease-in-out;
    text-align: center;
}

/* Hover effect */
#confirmButton:hover {
    background: #FFD700; /* Golden background */
    color: #111; /* Dark text */
    border-color: #fff; /* White border */
    box-shadow: 0 4px 10px rgba(255, 215, 0, 0.3);
}

/* Click (active) effect */
#confirmButton:active {
    background: #e6c200;
    transform: scale(0.96);
}
/* Dropdown Styling */

.part2 select {
    width: 160px;
    padding: 6px;
    font-size: 14px;
    font-weight: 500;
    color: #fff;
    border: 2px solid #FFD700; /* Golden border */
    border-radius: 4px;
    text-align: center;
    outline: none;
    cursor: pointer;
    display: block;
    margin: 4px auto; /* Reduced spacing */
    appearance: none; /* Hides default arrow in some browsers */
}

/* Hover & Focus Effects */
.part2 select:focus {
    border-color: #fff;
    box-shadow: 0 1px 3px rgba(255, 255, 255, 0.2);
}

/* Remove default arrow in IE */
.part2 select::-ms-expand {
    display: none;
}

    </style>
</head>

<body>
    
<div class="part1">
    <select id="shapeSelector">
        <option value="circle">Select a Shape</option>
        <option value="circle">Circle</option>
        <option value="square">Square</option>
        <option value="hRectangle">Horizontal Rectangle</option>
        <option value="vRectangle">Vertical Rectangle</option>
        <option value="triangle">Triangle</option>
        <option value="reverseTriangle">Reverse Triangle</option>
    </select>
     <!-- Bullet points explaining each shape -->
     <ul class="shape-description">
        <li><strong>Circle:</strong> A round shape with no edges.</li>
        <li><strong>Square:</strong> Four equal sides with right angles.</li>
        <li><strong>Horizontal Rectangle:</strong> Wider than it is tall.</li>
        <li><strong>Vertical Rectangle:</strong> Taller than it is wide.</li>
        <li><strong>Triangle:</strong> A three-sided shape with pointed edges.</li>
        <li><strong>Reverse Triangle:</strong> An upside-down triangle.</li>
    </ul>
</div>
<div class="part2">
    <h2>Choose Breating TIme</h2>
    <div id="timingControls"></div>

</div>
<div class="part3">
    <select id="trackSelector">
      <option value="">Select a song</option>
      {% for track in tracks %}
          <option value="{{ track.file.url }}" 
                  data-title="{{ track.title }}" 
                  data-artist="{{ track.artist }}"
                  data-pattern="{{ track.get_vibration_pattern }}"
                  data-timestamps="{{ track.get_timestamps }}">
              {{ track.title }} - {{ track.artist }}
          </option>
      {% endfor %}
  </select>
</div>

<section>
    <button id="reloadBtn">Customise</button>
    <button id="goBackToPart3">Select Another Song</button>

<div class="shape-container" id="shapeContainer"></div>

  <audio id="audioPlayer"></audio>

  <!-- Progress Bar -->
  <div id="progressContainer">
    <div id="progressBar"></div>
    <div id="progressHandle"></div>
  </div>
  
  <!-- <button id="playSong">Play</button>
  <button id="stopButton">Stop</button> -->

  <button id="prevSong">Previous</button>
  <button id="playSong">Play</button>
  <button id="nextSong">Next</button>
  <button id="stopButton">Stop</button>
</section>


  <script>
    const shapeContainer = document.getElementById("shapeContainer");
    const shapeSelector = document.getElementById("shapeSelector");
    const timingControls = document.getElementById("timingControls");
    const playSong = document.getElementById("playSong");
    const stopButton = document.getElementById("stopButton");
    const progressContainer = document.getElementById("progressContainer");
    const progressBar = document.getElementById("progressBar");
    const progressHandle = document.getElementById("progressHandle");
    const audioPlayer = document.getElementById("audioPlayer");
  
    let textIndex = 0;
    let interval;
    let isAnimating = false;
    let animationTimeout;
    let durations = [];
  
    const breathingTexts = {
        circle: ["Inhale", "Exhale"],
        square: ["Inhale", "Hold", "Exhale", "Hold"],
        hRectangle: ["Inhale", "Hold", "Hold", "Exhale", "Hold", "Hold"],
        vRectangle: ["Inhale", "Inhale", "Hold", "Exhale", "Exhale", "Hold"],
        triangle: ["Inhale", "Exhale", "Hold"],
        reverseTriangle: ["Inhale", "Hold", "Exhale"]
    };
  
    function createTimingInputs(shape) {
    timingControls.innerHTML = ""; // Clear previous options

    breathingTexts[shape].forEach((phase, index) => {
        const label = document.createElement("label");
        label.innerText = `${phase} (seconds): `;

        // Create a select dropdown instead of input
        const select = document.createElement("select");
        select.id = `duration-${index}`;

        // Define the available timing options
        const timingOptions = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 14, 16, 18];

        // Populate dropdown with options
        timingOptions.forEach(time => {
            const option = document.createElement("option");
            option.value = time;
            option.innerText = time;
            select.appendChild(option);
        });

        // Default selected value
        select.value = "2";

        // Append elements to the container
        timingControls.appendChild(label);
        timingControls.appendChild(select);
        timingControls.appendChild(document.createElement("br"));
    });
}

  
    function createShape(shape) {
        shapeContainer.innerHTML = "";
        clearInterval(interval);
        textIndex = 0;
        durations = [];
        isAnimating = false;
  
        const div = document.createElement("div");
        div.classList.add("shape");
        div.setAttribute("id", shape);
  
        const goldenLine = document.createElement("div");
        goldenLine.classList.add("golden-line");
        goldenLine.style.width = "10px";
        goldenLine.style.height = "10px";
        goldenLine.style.borderRadius = "50%";
        goldenLine.style.backgroundColor = "gold";
  
        const textElement = document.createElement("span");
        textElement.classList.add("text");
        textElement.innerText = breathingTexts[shape][textIndex];
  
        function startAnimation() {
            stopAnimation();
            durations = breathingTexts[shape].map((_, index) => parseInt(document.getElementById(`duration-${index}`).value) || 2);
  
            let index = 0;
            isAnimating = true;
  
            function animateNextPhase() {
                if (!isAnimating) return;
                let currentDuration = durations[index] + "s";
                goldenLine.style.animation = "none";
                void goldenLine.offsetWidth;
  
                textElement.innerText = breathingTexts[shape][index];
  
                switch (shape) {
                    case "circle":
                        div.style.width = "200px";
                        div.style.height = "200px";
                        div.style.borderRadius = "50%";
                        goldenLine.style.animation = `moveCircle ${currentDuration} linear 1`;
                        break;
                    case "square":
                        div.style.width = "200px";
                        div.style.height = "200px";
                        goldenLine.style.animation = `moveSquare ${currentDuration} linear 1`;
                        break;
                    case "hRectangle":
                        div.style.width = "300px";
                        div.style.height = "150px";
                        goldenLine.style.animation = `moveRectangleH ${currentDuration} linear 1`;
                        break;
                    case "vRectangle":
                        div.style.width = "150px";
                        div.style.height = "300px";
                        goldenLine.style.animation = `moveRectangleV ${currentDuration} linear 1`;
                        break;
                }
  
                animationTimeout = setTimeout(() => {
                    index = (index + 1) % durations.length;
                    animateNextPhase();
                }, durations[index] * 1000);
            }
  
            animateNextPhase();
        }
  
        function stopAnimation() {
            isAnimating = false;
            goldenLine.style.animation = "none";
            clearTimeout(animationTimeout);
        }
  
        playSong.addEventListener("click", () => {
            stopAnimation();
            startAnimation();
        });
  
        stopButton.addEventListener("click", stopAnimation);
  
        div.appendChild(goldenLine);
        div.appendChild(textElement);
        shapeContainer.appendChild(div);
        stopAnimation();
    }
  
    shapeSelector.addEventListener("change", (e) => {
        createShape(e.target.value);
        createTimingInputs(e.target.value);
    });
  
    createShape(shapeSelector.value);
    createTimingInputs(shapeSelector.value);
  
    // 🎵 Music Controls + Progress Bar
    playSong.addEventListener("click", () => {
        const trackSelector = document.getElementById("trackSelector");
        const selectedOption = trackSelector.options[trackSelector.selectedIndex];
  
        if (!selectedOption.value) {
            alert("Please select a song first!");
            return;
        }
  
        if (audioPlayer.paused) {
            audioPlayer.src = selectedOption.value;
            audioPlayer.play();
            playSong.textContent = "Pause";
            startAnimation();
        } else {
            audioPlayer.pause();
            playSong.textContent = "Play";
            stopAnimation();
        }
    });
  
    function updateProgressBar() {
        if (audioPlayer.duration) {
            const percent = (audioPlayer.currentTime / audioPlayer.duration) * 100;
            progressBar.style.width = percent + "%";
            progressHandle.style.left = percent + "%";
        }
    }
  
    audioPlayer.addEventListener("timeupdate", updateProgressBar);
  
    progressContainer.addEventListener("click", (e) => {
        const rect = progressContainer.getBoundingClientRect();
        const clickX = e.clientX - rect.left;
        const width = rect.width;
        const seekTime = (clickX / width) * audioPlayer.duration;
        audioPlayer.currentTime = seekTime;
        updateProgressBar();
    });
  
    let isDragging = false;
  
    progressHandle.addEventListener("mousedown", () => {
        isDragging = true;
    });
  
    document.addEventListener("mouseup", () => {
        isDragging = false;
    });
  
    document.addEventListener("mousemove", (e) => {
        if (isDragging) {
            const rect = progressContainer.getBoundingClientRect();
            const moveX = e.clientX - rect.left;
            const width = rect.width;
            let newTime = (moveX / width) * audioPlayer.duration;
            newTime = Math.max(0, Math.min(newTime, audioPlayer.duration));
            audioPlayer.currentTime = newTime;
            updateProgressBar();
        }
    });
  
    audioPlayer.addEventListener("loadedmetadata", () => {
        progressBar.style.width = "0%";
        progressHandle.style.left = "0%";
    });


    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    
    const prevSong = document.getElementById("prevSong");
const nextSong = document.getElementById("nextSong");
const trackSelector = document.getElementById("trackSelector");

function changeTrack(direction) {
    let currentIndex = trackSelector.selectedIndex;
    let newIndex = currentIndex + direction;

    if (newIndex >= 1 && newIndex < trackSelector.options.length) {
        trackSelector.selectedIndex = newIndex;
        playSelectedTrack();
    }
}

function playSelectedTrack() {
    const selectedOption = trackSelector.options[trackSelector.selectedIndex];

    if (selectedOption.value) {
        audioPlayer.src = selectedOption.value;
        audioPlayer.play();
        playSong.textContent = "Pause";
        startAnimation();
    }
}

nextSong.addEventListener("click", () => changeTrack(1));
prevSong.addEventListener("click", () => changeTrack(-1));

  </script>
  
<!-- new code here ------------------------------------------------------------------------------------------------ -->
<script>
    document.addEventListener("DOMContentLoaded", function () {
        const part1 = document.querySelector(".part1");
        const part2 = document.querySelector(".part2");
        const part3 = document.querySelector(".part3");
        const section = document.querySelector("section"); // The section that should appear last

        const shapeSelector = document.getElementById("shapeSelector");
        const trackSelector = document.getElementById("trackSelector");
        const goBackToPart3 = document.getElementById("goBackToPart3");

        // Hide all parts except Part 1 initially
        part2.style.display = "none";
        part3.style.display = "none";
        section.style.display = "none"; 
        goBackToPart3.style.display = "none"; // Hide button initially

        // When a shape is selected, show Part 2 and hide Part 1
        shapeSelector.addEventListener("change", function () {
            part1.style.display = "none";
            part2.style.display = "block";
        });

        // Add a Confirm button inside Part 2 (if not already added)
        if (!document.getElementById("confirmButton")) {
            const confirmButton = document.createElement("button");
            confirmButton.id = "confirmButton";
            confirmButton.textContent = "Confirm";
            confirmButton.style.display = "block";
            document.querySelector(".part2").appendChild(confirmButton);

            // When Confirm is clicked, show Part 3 and hide Part 2
            confirmButton.addEventListener("click", function () {
                part2.style.display = "none";
                part3.style.display = "block";
            });
        }

        // When a song is selected, show the final section and hide Part 3
        trackSelector.addEventListener("change", function () {
            if (trackSelector.value) {
                part3.style.display = "none";
                section.style.display = "block";
                goBackToPart3.style.display = "block"; // Show button after song selection
            }
        });

        // Go back to Part 3 when button is clicked
        goBackToPart3.addEventListener("click", function () {
            section.style.display = "none";
            part3.style.display = "block";
        });
    });

    document.getElementById("reloadBtn").addEventListener("click", function () {
        location.reload();
    });
</script>
</body>

</html>
